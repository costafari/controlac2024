package sv.com.lc.controlac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientesAllPropertiesEquals(Clientes expected, Clientes actual) {
        assertClientesAutoGeneratedPropertiesEquals(expected, actual);
        assertClientesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientesAllUpdatablePropertiesEquals(Clientes expected, Clientes actual) {
        assertClientesUpdatableFieldsEquals(expected, actual);
        assertClientesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientesAutoGeneratedPropertiesEquals(Clientes expected, Clientes actual) {
        assertThat(expected)
            .as("Verify Clientes auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientesUpdatableFieldsEquals(Clientes expected, Clientes actual) {
        assertThat(expected)
            .as("Verify Clientes relevant properties")
            .satisfies(e -> assertThat(e.getActivo()).as("check activo").isEqualTo(actual.getActivo()))
            .satisfies(e -> assertThat(e.getApellidos()).as("check apellidos").isEqualTo(actual.getApellidos()))
            .satisfies(e -> assertThat(e.getDirecion()).as("check direcion").isEqualTo(actual.getDirecion()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNombreContacto()).as("check nombreContacto").isEqualTo(actual.getNombreContacto()))
            .satisfies(e -> assertThat(e.getNombreEmpresa()).as("check nombreEmpresa").isEqualTo(actual.getNombreEmpresa()))
            .satisfies(e -> assertThat(e.getNombres()).as("check nombres").isEqualTo(actual.getNombres()))
            .satisfies(e -> assertThat(e.getNotas()).as("check notas").isEqualTo(actual.getNotas()))
            .satisfies(e -> assertThat(e.getSitioWeb()).as("check sitioWeb").isEqualTo(actual.getSitioWeb()))
            .satisfies(e -> assertThat(e.getTelefonoFijo()).as("check telefonoFijo").isEqualTo(actual.getTelefonoFijo()))
            .satisfies(e -> assertThat(e.getTelefonoFijo2()).as("check telefonoFijo2").isEqualTo(actual.getTelefonoFijo2()))
            .satisfies(e -> assertThat(e.getTelefonoMovil()).as("check telefonoMovil").isEqualTo(actual.getTelefonoMovil()))
            .satisfies(e -> assertThat(e.getTelefonoMovil2()).as("check telefonoMovil2").isEqualTo(actual.getTelefonoMovil2()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientesUpdatableRelationshipsEquals(Clientes expected, Clientes actual) {
        // empty method
    }
}
