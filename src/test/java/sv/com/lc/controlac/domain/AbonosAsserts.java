package sv.com.lc.controlac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AbonosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonosAllPropertiesEquals(Abonos expected, Abonos actual) {
        assertAbonosAutoGeneratedPropertiesEquals(expected, actual);
        assertAbonosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonosAllUpdatablePropertiesEquals(Abonos expected, Abonos actual) {
        assertAbonosUpdatableFieldsEquals(expected, actual);
        assertAbonosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonosAutoGeneratedPropertiesEquals(Abonos expected, Abonos actual) {
        assertThat(expected)
            .as("Verify Abonos auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonosUpdatableFieldsEquals(Abonos expected, Abonos actual) {
        assertThat(expected)
            .as("Verify Abonos relevant properties")
            .satisfies(e -> assertThat(e.getSaldoAnterior()).as("check saldoAnterior").isEqualTo(actual.getSaldoAnterior()))
            .satisfies(e -> assertThat(e.getAbono()).as("check abono").isEqualTo(actual.getAbono()))
            .satisfies(e -> assertThat(e.getNuevoSaldo()).as("check nuevoSaldo").isEqualTo(actual.getNuevoSaldo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonosUpdatableRelationshipsEquals(Abonos expected, Abonos actual) {
        assertThat(expected)
            .as("Verify Abonos relationships")
            .satisfies(e -> assertThat(e.getFacturas()).as("check facturas").isEqualTo(actual.getFacturas()));
    }
}
