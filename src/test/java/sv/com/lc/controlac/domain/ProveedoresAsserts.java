package sv.com.lc.controlac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProveedoresAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedoresAllPropertiesEquals(Proveedores expected, Proveedores actual) {
        assertProveedoresAutoGeneratedPropertiesEquals(expected, actual);
        assertProveedoresAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedoresAllUpdatablePropertiesEquals(Proveedores expected, Proveedores actual) {
        assertProveedoresUpdatableFieldsEquals(expected, actual);
        assertProveedoresUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedoresAutoGeneratedPropertiesEquals(Proveedores expected, Proveedores actual) {
        assertThat(expected)
            .as("Verify Proveedores auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedoresUpdatableFieldsEquals(Proveedores expected, Proveedores actual) {
        assertThat(expected)
            .as("Verify Proveedores relevant properties")
            .satisfies(e -> assertThat(e.getDireccion()).as("check direccion").isEqualTo(actual.getDireccion()))
            .satisfies(e -> assertThat(e.getNombreContacto()).as("check nombreContacto").isEqualTo(actual.getNombreContacto()))
            .satisfies(e -> assertThat(e.getNombreEmpresa()).as("check nombreEmpresa").isEqualTo(actual.getNombreEmpresa()))
            .satisfies(e -> assertThat(e.getNotas()).as("check notas").isEqualTo(actual.getNotas()))
            .satisfies(e -> assertThat(e.getSitioWeb()).as("check sitioWeb").isEqualTo(actual.getSitioWeb()))
            .satisfies(e -> assertThat(e.getTelefonoFijo()).as("check telefonoFijo").isEqualTo(actual.getTelefonoFijo()))
            .satisfies(e -> assertThat(e.getTelefonoFijo2()).as("check telefonoFijo2").isEqualTo(actual.getTelefonoFijo2()))
            .satisfies(e -> assertThat(e.getTelefonoMovil()).as("check telefonoMovil").isEqualTo(actual.getTelefonoMovil()))
            .satisfies(e -> assertThat(e.getTelefonoMovil2()).as("check telefonoMovil2").isEqualTo(actual.getTelefonoMovil2()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProveedoresUpdatableRelationshipsEquals(Proveedores expected, Proveedores actual) {
        // empty method
    }
}
